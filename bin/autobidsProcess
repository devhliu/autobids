#!/bin/bash


#this can be overriden in study_cfg files
TAR2BIDS_IMG=`shub-cache docker://khanlab/tar2bids:v0.0.3d`

function usage {
	echo "Runs dcm2bids, pre-bids, and post-bids pipelines on tar files(s)"
	echo "Usage $0 <options> <in tar file(s)>"
	echo ""
	echo " Optional arguments:"
	echo "  -c <study_cfg>: Specify study cfg (default: looks up study_cfg using tar name)"
	echo "  -f <subj_expr>: Override {subject} to search within tar filename (default: uses SUBJ_EXPR in study_cfg to search within patient_name)"
	echo "  -d <bids_dir>: Override custom output BIDS_DIR  (default: uses \$AUTOBIDS_DATA/PI/STUDY )"
}
	#option for specifying study_cfg

study_cfg=""
is_custom_cfg=0
simplesubjid=0
TAR_SUBJ_EXPR=
CUSTOM_BIDS_DIR=
is_bidsdump=0



opts="" #options for neuroglia/etc tools

while getopts "c:tf:d:b" options; do
 case $options in
    t ) echo "	Using test-mode (no submit jobs)" >&2
	opts="$opts -t";;
    f ) echo "	Overriding SUBJ_EXPR for tar filename: $OPTARG" >&2
	TAR_SUBJ_EXPR=$OPTARG;;
    d ) echo "	Overriding output BIDS_DIR as: $OPTARG" >&2
	CUSTOM_BIDS_DIR=`realpath $OPTARG`;;
    c ) echo "  Using custom study_cfg: $OPTARG" >&2
	is_custom_cfg=1
	study_cfg=$OPTARG;;
    b ) echo "  Using bidsdump settings - currently this option does not do anything differently.."
#	    echo "Setting umask -S go-rwx" >&2
#	    umask -S go-rwx >&2
	    is_bidsdump=1;;
    * ) usage
	exit 1;;
 esac
done

shift $((OPTIND-1))

if [ "$#" -lt 1 ]
then
  usage;
  exit 1;
fi


nscans=$#

if [ "$#" -gt 1 ]
then
	single_subj=0
else
	single_subj=1
fi


if [ -n "$study_cfg" ]
then
	if [ ! -e $study_cfg ]
	then
		echo "ERROR in $0: study_cfg $study_cfg does not exist!"
		exit 1
	fi
	for tar in $@
	do
		in_tar="$in_tar `realpath $tar`"
	done
else

#if study_cfg not specified, then look it up, and make sure it is the same for all tar files..

in_tar=$1

if [ ! -e $in_tar ]
then
	echo "ERROR in $0: tarfile does not exist"
	echo $in_tar
	exit 1
else
	in_tar=`realpath $in_tar`

fi


#parse tarfile to get study config name
study_cfg=`$AUTOBIDS_DIR/etc/getStudyCfg $in_tar`
if [ ! $? = 0 ]
then
 echo "ERROR in $0: study config not found"
 exit 1
fi


in_folder=`realpath $in_tar`
in_folder=${in_folder%/*}



#if multiple tar files, make sure all point to same study cfg
if [ "$#" -gt 1 ]
then
	shift 1
	for tar in $@
	do
		if [ ! -e $tar ]
		then
			echo "ERROR in $0: tarfile does not exist"
			echo $tar
			exit 1
		else
			tar=`realpath $tar`
		fi


		cfg=`$AUTOBIDS_DIR/etc/getStudyCfg $tar`
		if [ ! "$cfg" = "$study_cfg" ]
		then
			echo "ERROR in $0, study_cfg not same for all tar files"
			echo "$cfg != $study_cfg"
			exit 1
		fi
		
		#add check to make sure tars are coming from same folder (in_folder)

		in_tar="$in_tar $tar"
	done

fi #if multiple tars

fi #if study_cfg defined..

if [ ! -e $study_cfg ]
then
	echo "ERROR: Study_cfg not defined for $in_tar" 
	exit 1
fi

study_cfg=`realpath $study_cfg`
source $study_cfg


#add checks here to ensure all required variables are set:
if [ -n "$CUSTOM_BIDS_DIR" ]
then
	BIDS_DIR=$CUSTOM_BIDS_DIR
else

if [ ! -n "$BIDS_DIR" ]
then

	#if BIDS_DIR not defined, then set it based on $study_cfg
	cfg_name=${study_cfg##*/}
	pi_name=${cfg_name%%_*}
	study_name=${cfg_name##${pi_name}_}

	BIDS_DIR=$AUTOBIDS_DATA/$pi_name/$study_name
	
	echo "Using default BIDS_DIR=$BIDS_DIR"
	
fi

fi


if [ ! -n "$SUBJ_EXPR" ]
then
	echo ERROR in $0: SUBJ_EXPR not defined in $study_cfg
	exit 1
fi

#HEURISTIC optional - default is cfmm_bold_rest
#if [ -n "$HEURISTIC" ]
#then
#	if [ ! -e $HEURISTIC ]
#	then
#		echo ERROR in $0:  $HEURISTIC not found
#		exit 1
#	fi
#else
#	echo ERROR in $0: HEURISTIC not defined in $study_cfg
#	exit 1
#fi

#optional: PRE_BIDS_SCRIPT
if [ -n "$PRE_BIDS_SCRIPT" ]
then
	if [ ! -e $PRE_BIDS_SCRIPTS ]
	then
		echo ERROR in $0: $PRE_BIDS_SCRIPTS not found
		exit 1
	fi
fi


#optional: POST_BIDS_SCRIPT
if [ -n "$POST_BIDS_SCRIPT" ]
then
	if [ ! -e $POST_BIDS_SCRIPTS ]
	then
		echo ERROR in $0: $POST_BIDS_SCRIPTS not found
		exit 1
	fi
fi

echo ""
echo "STUDY_CFG: $study_cfg"
echo "BIDS_DIR: $BIDS_DIR"
echo ""


# Incremental additions to the BIDS_DIR;  assume BIDS_DIR is set to the folder that contains the bids/ subfolder
#  for now, strip off the "/bids" from the end if it exists
BIDS_DIR=${BIDS_DIR%/bids}
BIDS_DIR=`realpath $BIDS_DIR`

#now, we want to:

# 1. make an incoming bids subfolder (uniquely named)
INCOMING_ID=`date +%Y-%m-%d_%Hh%Mm.$RANDOM`
INCOMING_BIDS_DIR=$BIDS_DIR/incoming_bids/$INCOMING_ID
mkdir -p $INCOMING_BIDS_DIR

MAIL_DIR=$BIDS_DIR/code/mail_out
mkdir -p $MAIL_DIR

MAIL_MSG=$MAIL_DIR/$INCOMING_ID.txt

# 2. import into that folder
mkdir -p $INCOMING_BIDS_DIR/code
pushd $INCOMING_BIDS_DIR/code

#submit tar2bids job here
# if run on SLURM, request number of cores based on number of scans to convert
if [ $nscans -lt 16 ]
then
job_tar2bids=$(regularSubmit $opts -N tar2bids -j 8core32gb3h singularity run $SINGULARITY_OPTS -B /localscratch:/localscratch $TAR2BIDS_IMG -o $INCOMING_BIDS_DIR -P "'${SUBJ_EXPR}'" -h $HEURISTIC -N 8 -w \$SLURM_TMPDIR  -C $in_tar)
elif [ $nscans -lt 32 ]
then
job_tar2bids=$(regularSubmit $opts -N tar2bids -j 16core64gb3h singularity run $SINGULARITY_OPTS -B /localscratch:/localscratch $TAR2BIDS_IMG -o $INCOMING_BIDS_DIR -P "'${SUBJ_EXPR}'" -h $HEURISTIC -N 16 -w \$SLURM_TMPDIR -C $in_tar)
else
job_tar2bids=$(regularSubmit $opts -N tar2bids -j 32core128gb3h singularity run $SINGULARITY_OPTS -B /localscratch:/localscratch $TAR2BIDS_IMG -o $INCOMING_BIDS_DIR -P "'${SUBJ_EXPR}'" -h $HEURISTIC -N 32 -w \$SLURM_TMPDIR -C $in_tar)
fi

errorcode=$?
if [ "$errorcode" != 0 ]
then
	echo "Tar2bids job submission failed, errorcode: $errorcode" >&2
	echo "TODO: try to send e-mail notification?"
	exit $errorcode
fi

# if run local: 
# tar2bids -o $BIDS_DIR -P "'${SUBJ_EXPR}'" -h $HEURISTIC -N 8 -w $SLURM_TMPDIR -C  $in_tar
sleep 2

depjob=$job_tar2bids
#use globus to sync to an endpoint after bids conversion (if GLOBUS_BIDS_ENDPOINT exists in study cfg)
if [ -n "$EMAIL_NOTIFICATION" -a -n "$GLOBUS_BIDS_ENDPOINT" ]
then
	job_genmail=$(regularSubmit $opts -j Quick -d afterany:$job_tar2bids -N createmail "$AUTOBIDS_DIR/etc/genMailOutput $INCOMING_BIDS_DIR $GLOBUS_BIDS_ENDPOINT > $MAIL_MSG")


	job_sendmail=$(regularSubmit $opts -j Quick -d afterok:$job_genmail -N sendmail $AUTOBIDS_DIR/etc/queueNetworkJob $AUTOBIDS_DIR/etc/sendMail $EMAIL_NOTIFICATION ${BIDS_DIR##*/} $MAIL_MSG )
	sleep 2

	depjob=$job_genmail
fi

# 3. submit merge job (to bring incoming bids into main folder) - returns non-zero if failed


job_merge=$(regularSubmit $opts -j Quick -d afterok:$job_genmail $AUTOBIDS_DIR/etc/mergeBIDS $INCOMING_BIDS_DIR $BIDS_DIR )

# 4. submit post-proc job on the incoming bids dataset, outputting to the main folder

#postbids pipeline (to run on validated bids datasets) is optional:
if [ -n "$POST_BIDS_PIPELINE" ]
then

#submit a job that will submit the post-bids-pipeline when bids is ready.. (since bidsBatch requires the participants.tsv to exist at submission time)
job_postproc=$(regularSubmit $opts -j Quick -d afterany:$job_tar2bids $POST_BIDS_PIPELINE -o $INCOMING_BIDS_DIR )
sleep 2

#notification for post-proc TBD (since currently unable to get jobid from job that is not yet submitted)

fi

popd

#3. 


exit 0
