#!/bin/bash


function usage {
	echo "Runs dcm2bids, pre-bids, and post-bids pipelines on tar files(s)"
	echo "Usage $0 <options> <in tar file(s)>"
	echo ""
	echo " Optional arguments:"
	echo "  -c <study_cfg>: Specify study cfg (default: looks up study_cfg using tar name)"
	echo "  -f <subj_expr>: Override {subject} to search within tar filename (default: uses SUBJ_EXPR in study_cfg to search within patient_name)"
	echo "  -d <bids_dir>: Override custom output BIDS_DIR  (default: uses \$AUTOBIDS_DATA/PI/STUDY )"
}
	#option for specifying study_cfg

testmode=0
study_cfg=""
is_custom_cfg=0
simplesubjid=0
TAR_SUBJ_EXPR=
CUSTOM_BIDS_DIR=

opts="" #options for neuroglia/etc tools

while getopts "c:tf:d:" options; do
 case $options in
    t ) echo "	Using test-mode (no submit jobs)" >&2
	testmode=1;;
    f ) echo "	Overriding SUBJ_EXPR for tar filename: $OPTARG" >&2
	TAR_SUBJ_EXPR=$OPTARG;;
    d ) echo "	Overriding output BIDS_DIR as: $OPTARG" >&2
	CUSTOM_BIDS_DIR=`realpath $OPTARG`;;
    c ) echo "  Using custom study_cfg: $OPTARG" >&2
	is_custom_cfg=1
	study_cfg=$OPTARG;;
    * ) usage
	exit 1;;
 esac
done

shift $((OPTIND-1))

if [ "$#" -lt 1 ]
then
  usage;
  exit 1;
fi


if [ "$#" -gt 1 ]
then
	single_subj=0
else
	single_subj=1
fi


if [ -n "$study_cfg" ]
then
	if [ ! -e $study_cfg ]
	then
		echo "ERROR in $0: study_cfg $study_cfg does not exist!"
		exit 1
	fi
	in_tar=$@
else

#if study_cfg not specified, then look it up, and make sure it is the same for all tar files..

in_tar=$1

if [ ! -e $in_tar ]
then
	echo "ERROR in $0: tarfile does not exist"
	echo $in_tar
	exit 1
fi


#parse tarfile to get study config name
study_cfg=`$AUTOBIDS_DIR/etc/getStudyCfg $in_tar`
if [ ! $? = 0 ]
then
 echo "ERROR in $0: study config not found"
 exit 1
fi


in_folder=`realpath $in_tar`
in_folder=${in_folder%/*}



#if multiple tar files, make sure all point to same study cfg
if [ "$#" -gt 1 ]
then
	shift 1
	for tar in $@
	do
		if [ ! -e $tar ]
		then
			echo "ERROR in $0: tarfile does not exist"
			echo $tar
			exit 1
		fi


		cfg=`$AUTOBIDS_DIR/etc/getStudyCfg $tar`
		if [ ! "$cfg" = "$study_cfg" ]
		then
			echo "ERROR in $0, study_cfg not same for all tar files"
			echo "$cfg != $study_cfg"
			exit 1
		fi
		
		#add check to make sure tars are coming from same folder (in_folder)

		in_tar="$in_tar $tar"
	done

fi #if multiple tars

fi #if study_cfg defined..

if [ ! -e $study_cfg ]
then
	echo "ERROR: Study_cfg not defined for $in_tar" 
	exit 1
fi

study_cfg=`realpath $study_cfg`
source $study_cfg


#add checks here to ensure all required variables are set:
if [ -n "$CUSTOM_BIDS_DIR" ]
then
	BIDS_DIR=$CUSTOM_BIDS_DIR
else

if [ ! -n "$BIDS_DIR" ]
then

	#if BIDS_DIR not defined, then set it based on $study_cfg
	cfg_name=${study_cfg##*/}
	pi_name=${cfg_name%%_*}
	study_name=${cfg_name##${pi_name}_}

	BIDS_DIR=$AUTOBIDS_DATA/$pi_name/$study_name
	echo "Using default BIDS_DIR=$BIDS_DIR"

	
fi

fi


if [ ! -n "$SUBJ_EXPR" ]
then
	echo ERROR in $0: SUBJ_EXPR not defined in $study_cfg
	exit 1
fi

#HEURISTIC optional
#if [ -n "$HEURISTIC" ]
#then
#	if [ ! -e $HEURISTIC ]
#	then
#		echo ERROR in $0:  $HEURISTIC not found
#		exit 1
#	fi
#else
#	echo ERROR in $0: HEURISTIC not defined in $study_cfg
#	exit 1
#fi

#optional: PRE_BIDS_SCRIPT
if [ -n "$PRE_BIDS_SCRIPT" ]
then
	if [ ! -e $PRE_BIDS_SCRIPTS ]
	then
		echo ERROR in $0: $PRE_BIDS_SCRIPTS not found
		exit 1
	fi
fi


#optional: POST_BIDS_SCRIPT
if [ -n "$POST_BIDS_SCRIPT" ]
then
	if [ ! -e $POST_BIDS_SCRIPTS ]
	then
		echo ERROR in $0: $POST_BIDS_SCRIPTS not found
		exit 1
	fi
fi

echo ""
echo "STUDY_CFG: $study_cfg"
echo "BIDS_DIR: $BIDS_DIR"
echo ""

VALIDATOR=$AUTOBIDS_DIR/pipelines/bids-validator

if [ "$single_subj" = "0" -a -e $BIDS_DIR ]
then
 echo "Processing multiple subjects into an existing BIDS_DIR"
 #maybe add an exception later..
fi

code_dir=$BIDS_DIR/code
sourcedata=$BIDS_DIR/sourcedata
mkdir -p $code_dir $sourcedata

datestring=`date +%Y-%m-%d_%I%p`
log_dir=$code_dir/autobids_$datestring
if [ -e $log_dir ]
then 
 log_dir=${log_dir}_`date +%M`
fi

mkdir -p $log_dir

subjlist=$log_dir/subjects-list.txt
validator_out=$log_dir/bids-validator.txt
heudiconv_out=$log_dir/heudiconv

# parse tarfile names to get subjids
for tar in $in_tar
do
	filename=${tar##*/}

	folder=`realpath $(dirname $tar)`

	if [ -n "$TAR_SUBJ_EXPR" ]
	then
		subjid=`$AUTOBIDS_DIR/etc/getSubjID $TAR_SUBJ_EXPR $filename`
		echo "$filename -> $subjid"
	else

		#new parsing that allows for underscores in study name
		pi=`echo $filename | awk  -F '_' '{print $1}'`
		pi_study=${filename%%_[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]_*}
		study=${pi_study##${pi}_}
		date_etc=${filename##${pi}_${study}_}
		date=${date_etc%%_*}

		patient_etc=${date_etc##${date}_}
		patient_name=${patient_etc%%_[0-9].*}



#		pi=`echo $filename | awk  -F '_' '{print $1}'`
#		study=`echo $filename| awk  -F '_' '{print $2}'`
#		date=`echo $filename | awk  -F '_' '{print $3}'`
#		suffix=${filename##*_}


		#strip off <STUDY_DESC>_<DATE>_ from front
  	     	 #and _?.<HASH>.tgz from back
#		patient_name=${filename#${pi}_${study}_${date}_}
#		patient_name=${patient_name%_${suffix}}

		subjid=`$AUTOBIDS_DIR/etc/getSubjID $SUBJ_EXPR $patient_name`
		echo "$filename -> $subjid"
	fi

	if [ ! $? = 0 ]
	then
		echo ERROR in $0: no matching subjid in tar
		echo tar: $tar study_cfg: $study_cfg
		echo $subjid
		exit 1
	fi


	#copy tar to source data
	if [ "$testmode" = 0 ] #only copy if not in test mode
	then
		if [ ! -e $sourcedata/$filename ]
		then
		cp -v  $tar $sourcedata
		fi
		tar_dir=$sourcedata
	fi

	#compile subjid list
	echo $subjid >> $subjlist
done

#sort and remove duplicate entries in subjlist
sort -u $subjlist -o $subjlist


pushd $log_dir > /dev/null

if [ "$testmode" = 1 ]
then
	opts="-t $opts"
fi


#expression for heudiconv
if [ -n "$TAR_SUBJ_EXPR" ]
then
dicom_expr=$tar_dir/${TAR_SUBJ_EXPR}
else
dicom_expr=$tar_dir/${pi}_${study}_????????_${SUBJ_EXPR}_?.????????.tar
fi

#dicom conversion is optional 
if [ -n "$DCM2BIDS_PIPELINE" -a -n "$HEURISTIC" ]
then
job_dcm2bids=$($DCM2BIDS_PIPELINE $BIDS_DIR $subjlist -f $HEURISTIC -d $dicom_expr -L $heudiconv_out )


#prebids pipeline (to create a "more" valid bids dataset) is optional:
if [ -n "$PRE_BIDS_PIPELINE" ] #run the pipeline referred to in study_cfg
then
echo $PRE_BIDS_PIPELINE $BIDS_DIR $subjlist afterany:$job_dcm2bids
job_prebids=$($PRE_BIDS_PIPELINE $BIDS_DIR $subjlist afterany:$job_dcm2bids)
else
job_prebids=$job_dcm2bids
fi

#run bids-validator, but wait for it to finish to send a confirmation e-mail (depends on heudiconv and prebids finishing)
job_validator=$($VALIDATOR $BIDS_DIR $validator_out afterany:$job_prebids)

if [ -n "$GLOBUS_BIDS_ENDPOINT" ]
then
regularSubmit -j Quick -d afterany:$job_validator -N syncbids $AUTOBIDS_DIR/etc/queueGlobusBIDS $BIDS_DIR $GLOBUS_BIDS_ENDPOINT --label ${study_cfg##*/}
fi


#postbids pipeline (to run on validated bids datasets) is optional:
if [ -n "$POST_BIDS_PIPELINE" ]
then
#echo $POST_BIDS_PIPELINE $BIDS_DIR $subjlist afterok:$job_prebids 
#job_postbids=$($POST_BIDS_PIPELINE $BIDS_DIR $subjlist afterok:$job_prebids )

#submit a job that will submit the post-bids-pipeline when bids is ready.. (since bidsBatch requires the participants.tsv to exist at submission time)
job_pipeline=$(regularSubmit -j ShortSkinny -d afterany:$job_prebids  $POST_BIDS_PIPELINE $BIDS_DIR $subjlist )

if [ -n "$GLOBUS_BIDS_ENDPOINT" ]
then
regularSubmit -j Quick -d afterany:$job_pipeline -N syncpipeline $AUTOBIDS_DIR/etc/queueGlobusBIDS $BIDS_DIR $GLOBUS_BIDS_ENDPOINT --label ${study_cfg##*/}
fi



fi

fi #run dcm2bids



popd > /dev/null

exit 0
